{"version":3,"file":"Water.js","sources":["../../src/effects/Water.tsx"],"sourcesContent":["import { Uniform } from 'three'\nimport { BlendFunction, Effect, EffectAttribute } from 'postprocessing'\nimport { wrapEffect } from '../util'\n\nconst WaterShader = {\n  fragmentShader: `\n  uniform float factor;\n  void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n    vec2 vUv = uv;\n    float frequency = 6.0 * factor;\n    float amplitude = 0.015 * factor;\n    float x = vUv.y * frequency + time * .7; \n    float y = vUv.x * frequency + time * .3;\n    vUv.x += cos(x+y) * amplitude * cos(y);\n    vUv.y += sin(x-y) * amplitude * cos(y);\n    vec4 rgba = texture2D(inputBuffer, vUv);\n    outputColor = rgba;\n  }`\n}\n\nexport class WaterEffectImpl extends Effect {\n  constructor({ blendFunction = BlendFunction.NORMAL, factor = 0 } = {}) {\n    super('WaterEffect', WaterShader.fragmentShader, {\n      blendFunction,\n      attributes: EffectAttribute.CONVOLUTION,\n      uniforms: new Map<string, Uniform<number | number[]>>([['factor', new Uniform(factor)]])\n    })\n  }\n}\n\nexport const WaterEffect = wrapEffect(WaterEffectImpl, { blendFunction: BlendFunction.NORMAL })\n"],"names":[],"mappings":";;;AAIA,MAAM,cAAc;AAAA,EAClB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalB;AAEO,MAAM,wBAAwB,OAAO;AAAA,EAC1C,YAAY,EAAE,gBAAgB,cAAc,QAAQ,SAAS,EAAM,IAAA,IAAI;AAC/D,UAAA,eAAe,YAAY,gBAAgB;AAAA,MAC/C;AAAA,MACA,YAAY,gBAAgB;AAAA,MAC5B,UAAc,oBAAA,IAAwC,CAAC,CAAC,UAAU,IAAI,QAAQ,MAAM,CAAC,CAAC,CAAC;AAAA,IAAA,CACxF;AAAA,EACH;AACF;AAEO,MAAM,cAAc,WAAW,iBAAiB,EAAE,eAAe,cAAc,OAAQ,CAAA;"}